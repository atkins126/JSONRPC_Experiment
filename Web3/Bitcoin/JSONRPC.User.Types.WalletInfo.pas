// This unit is autogenerated. Do not edit it manually.
// Source: JSON entered in editor
// Date: 3/11/2023 1:37:46 PM

unit JSONRPC.User.Types.WalletInfo;

interface

uses
  System.JSON.Serializers, System.JSON;

type
  [JsonSerialize(TJsonMemberSerialization.Fields)]
  WalletInfoResult = record
  private
    [JsonName('walletname')]
    Fwalletname: string;
    [JsonName('walletversion')]
    Fwalletversion: Integer;
    [JsonName('format')]
    Fformat: string;
    [JsonName('balance')]
    Fbalance: Double;
    [JsonName('unconfirmed_balance')]
    Funconfirmed_balance: Double;
    [JsonName('immature_balance')]
    Fimmature_balance: Double;
    [JsonName('txcount')]
    Ftxcount: Integer;
    [JsonName('keypoololdest')]
    Fkeypoololdest: Integer;
    [JsonName('keypoolsize')]
    Fkeypoolsize: Integer;
    [JsonName('unlocked_until')]
    Funlocked_until: Integer;
    [JsonName('paytxfee')]
    Fpaytxfee: Double;
    [JsonName('private_keys_enabled')]
    Fprivate_keys_enabled: Boolean;
    [JsonName('avoid_reuse')]
    Favoid_reuse: Boolean;
    [JsonName('scanning')]
    Fscanning: Boolean;
    [JsonName('descriptors')]
    Fdescriptors: Boolean;
    [JsonName('external_signer')]
    Fexternal_signer: Boolean;
  public
    class function FromJSON(const AValue: TJSONValue): WalletInfoResult; overload; static;
    class function FromJSON(const AValue: string): WalletInfoResult; overload; static;
    function ToJSONObject: TJSONValue;
    function ToJSONString: string;
    property walletname: string read Fwalletname write Fwalletname;
    property walletversion: Integer read Fwalletversion write Fwalletversion;
    property format: string read Fformat write Fformat;
    property balance: Double read Fbalance write Fbalance;
    property unconfirmed_balance: Double read Funconfirmed_balance write Funconfirmed_balance;
    property immature_balance: Double read Fimmature_balance write Fimmature_balance;
    property txcount: Integer read Ftxcount write Ftxcount;
    property keypoololdest: Integer read Fkeypoololdest write Fkeypoololdest;
    property keypoolsize: Integer read Fkeypoolsize write Fkeypoolsize;
    property unlocked_until: Integer read Funlocked_until write Funlocked_until;
    property paytxfee: Double read Fpaytxfee write Fpaytxfee;
    property private_keys_enabled: Boolean read Fprivate_keys_enabled write Fprivate_keys_enabled;
    property avoid_reuse: Boolean read Favoid_reuse write Favoid_reuse;
    property scanning: Boolean read Fscanning write Fscanning;
    property descriptors: Boolean read Fdescriptors write Fdescriptors;
    property external_signer: Boolean read Fexternal_signer write Fexternal_signer;
  end;

//  [JsonSerialize(TJsonMemberSerialization.Fields)]
//  DataSet = record
//  private
//    [JsonName('Dataset')]
//    FDataset: TArray<WalletInfoResult>;
//  public
//    class function FromJSON(const AValue: TJSONArray): DataSet; overload; static;
//    class function FromJSON(const AValue: string): DataSet; overload; static;
//    function ToJSONArray: TJSONArray;
//    function ToJSONString: string;
//    property Dataset: TArray<WalletInfoResult> read FDataset write FDataset;
//  end;

implementation

class function WalletInfoResult.FromJSON(const AValue: TJSONValue): WalletInfoResult;
begin
  Result := TJSONMapper<WalletInfoResult>.Default.FromObject(AValue);
end;

class function WalletInfoResult.FromJSON(const AValue: string): WalletInfoResult;
begin
  Result := TJSONMapper<WalletInfoResult>.Default.FromObject(AValue);
end;

function WalletInfoResult.ToJSONObject: TJSONValue;
begin
  Result := TJSONMapper<WalletInfoResult>.Default.ToObject(Self);
end;

function WalletInfoResult.ToJSONString: string;
begin
  Result := TJSONMapper<WalletInfoResult>.Default.ToString(Self);
end;

//class function DataSet.FromJSON(const AValue: TJSONArray): DataSet;
//begin
//  var LArr := TJSONMapper<WalletInfoResult>.Default.FromArray(AValue);
//  Result.Dataset := LArr;
//end;
//
//class function DataSet.FromJSON(const AValue: string): DataSet;
//begin
//  var LArr := TJSONMapper<WalletInfoResult>.Default.FromArray(AValue);
//  Result.Dataset := LArr;
//end;
//
//function DataSet.ToJSONArray: TJSONArray;
//begin
//  Result := TJSONMapper<WalletInfoResult>.Default.ToArray(Dataset);
//end;
//
//function DataSet.ToJSONString: string;
//begin
//  Result := TJSONMapper<WalletInfoResult>.Default.ToString(Dataset);
//end;

end.
