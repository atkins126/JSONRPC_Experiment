// This unit is autogenerated. Do not edit it manually.
// Source: JSON entered in editor
// Date: 3/11/2023 2:54:22 PM

unit JSONRPC.User.Types.BlockInfo;

interface

uses
  System.JSON.Serializers, System.JSON;

type
  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TScriptSig = record
  private
    [JsonName('asm')]
    Fasm: string;
    [JsonName('hex')]
    Fhex: string;
  public
    property &asm: string read Fasm write Fasm;
    property hex: string read Fhex write Fhex;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TScriptPubKey = record
  private
    [JsonName('asm')]
    Fasm: string;
    [JsonName('desc')]
    Fdesc: string;
    [JsonName('hex')]
    Fhex: string;
    [JsonName('address')]
    Faddress: string;
    [JsonName('type')]
    Ftype: string;
  public
    property &asm: string read Fasm write Fasm;
    property desc: string read Fdesc write Fdesc;
    property hex: string read Fhex write Fhex;
    property address: string read Faddress write Faddress;
    property &type: string read Ftype write Ftype;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TVin = record
  private
    [JsonName('coinbase')]
    Fcoinbase: string;
    [JsonName('txinwitness')]
    Ftxinwitness: TArray<string>;
    [JsonName('sequence')]
    Fsequence: Int64;
    [JsonName('txid')]
    Ftxid: string;
    [JsonName('vout')]
    Fvout: Integer;
    [JsonName('scriptSig')]
    FscriptSig: TScriptSig;
  public
    property coinbase: string read Fcoinbase write Fcoinbase;
    property txinwitness: TArray<string> read Ftxinwitness write Ftxinwitness;
    property sequence: Int64 read Fsequence write Fsequence;
    property txid: string read Ftxid write Ftxid;
    property vout: Integer read Fvout write Fvout;
    property scriptSig: TScriptSig read FscriptSig write FscriptSig;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TVout = record
  private
    [JsonName('value')]
    Fvalue: Double;
    [JsonName('n')]
    Fn: Integer;
    [JsonName('scriptPubKey')]
    FscriptPubKey: TScriptPubKey;
  public
    property value: Double read Fvalue write Fvalue;
    property n: Integer read Fn write Fn;
    property scriptPubKey: TScriptPubKey read FscriptPubKey write FscriptPubKey;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TTx = record
  private
    [JsonName('txid')]
    Ftxid: string;
    [JsonName('hash')]
    Fhash: string;
    [JsonName('version')]
    Fversion: Integer;
    [JsonName('size')]
    Fsize: Integer;
    [JsonName('vsize')]
    Fvsize: Integer;
    [JsonName('weight')]
    Fweight: Integer;
    [JsonName('locktime')]
    Flocktime: Integer;
    [JsonName('vin')]
    Fvin: TArray<TVin>;
    [JsonName('vout')]
    Fvout: TArray<TVout>;
    [JsonName('hex')]
    Fhex: string;
    [JsonName('fee')]
    Ffee: Double;
  public
    property txid: string read Ftxid write Ftxid;
    property hash: string read Fhash write Fhash;
    property version: Integer read Fversion write Fversion;
    property size: Integer read Fsize write Fsize;
    property vsize: Integer read Fvsize write Fvsize;
    property weight: Integer read Fweight write Fweight;
    property locktime: Integer read Flocktime write Flocktime;
    property vin: TArray<TVin> read Fvin write Fvin;
    property vout: TArray<TVout> read Fvout write Fvout;
    property hex: string read Fhex write Fhex;
    property fee: Double read Ffee write Ffee;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  BlockResult = record
  private
    [JsonName('hash')]
    Fhash: string;
    [JsonName('confirmations')]
    Fconfirmations: Integer;
    [JsonName('height')]
    Fheight: Integer;
    [JsonName('version')]
    Fversion: Integer;
    [JsonName('versionHex')]
    FversionHex: Integer;
    [JsonName('merkleroot')]
    Fmerkleroot: string;
    [JsonName('time')]
    Ftime: Integer;
    [JsonName('mediantime')]
    Fmediantime: Integer;
    [JsonName('nonce')]
    Fnonce: Int64;
    [JsonName('bits')]
    Fbits: Integer;
    [JsonName('difficulty')]
    Fdifficulty: Double;
    [JsonName('chainwork')]
    Fchainwork: string;
    [JsonName('nTx')]
    FnTx: Integer;
    [JsonName('previousblockhash')]
    Fpreviousblockhash: string;
    [JsonName('strippedsize')]
    Fstrippedsize: Integer;
    [JsonName('size')]
    Fsize: Integer;
    [JsonName('weight')]
    Fweight: Integer;
    [JsonName('tx')]
    Ftx: TArray<TTx>;
  public
    class function FromJSON(const AValue: TJSONValue): BlockResult; overload; static;
    class function FromJSON(const AValue: string): BlockResult; overload; static;
    function ToJSONObject: TJSONValue;
    function ToJSONString: string;
    property hash: string read Fhash write Fhash;
    property confirmations: Integer read Fconfirmations write Fconfirmations;
    property height: Integer read Fheight write Fheight;
    property version: Integer read Fversion write Fversion;
    property versionHex: Integer read FversionHex write FversionHex;
    property merkleroot: string read Fmerkleroot write Fmerkleroot;
    property time: Integer read Ftime write Ftime;
    property mediantime: Integer read Fmediantime write Fmediantime;
    property nonce: Int64 read Fnonce write Fnonce;
    property bits: Integer read Fbits write Fbits;
    property difficulty: Double read Fdifficulty write Fdifficulty;
    property chainwork: string read Fchainwork write Fchainwork;
    property nTx: Integer read FnTx write FnTx;
    property previousblockhash: string read Fpreviousblockhash write Fpreviousblockhash;
    property strippedsize: Integer read Fstrippedsize write Fstrippedsize;
    property size: Integer read Fsize write Fsize;
    property weight: Integer read Fweight write Fweight;
    property tx: TArray<TTx> read Ftx write Ftx;
  end;

implementation

class function BlockResult.FromJSON(const AValue: TJSONValue): BlockResult;
begin
  Result := TJSONMapper<BlockResult>.Default.FromObject(AValue);
end;

class function BlockResult.FromJSON(const AValue: string): BlockResult;
begin
  Result := TJSONMapper<BlockResult>.Default.FromObject(AValue);
end;

function BlockResult.ToJSONObject: TJSONValue;
begin
  Result := TJSONMapper<BlockResult>.Default.ToObject(Self);
end;

function BlockResult.ToJSONString: string;
begin
  Result := TJSONMapper<BlockResult>.Default.ToString(Self);
end;

end.
