// This unit is autogenerated. Do not edit it manually.
// Source: JSON entered in editor
// Date: 3/11/2023 12:18:09 PM

unit JSONRPC.User.Types.MemoryInfo;

interface

uses
  System.JSON.Serializers, System.JSON;

type
  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TMemoryInfo = record
  private
    [JsonName('used')]
    Fused: Integer;
    [JsonName('free')]
    Ffree: Integer;
    [JsonName('total')]
    Ftotal: Integer;
    [JsonName('locked')]
    Flocked: Integer;
    [JsonName('chunks_used')]
    Fchunks_used: Integer;
    [JsonName('chunks_free')]
    Fchunks_free: Integer;
  public
    property used: Integer read Fused write Fused;
    property free: Integer read Ffree write Ffree;
    property total: Integer read Ftotal write Ftotal;
    property locked: Integer read Flocked write Flocked;
    property chunks_used: Integer read Fchunks_used write Fchunks_used;
    property chunks_free: Integer read Fchunks_free write Fchunks_free;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  MemoryInfoResult = record
  private
    [JsonName('locked')]
    Flocked: TMemoryInfo;
  public
    class function FromJSON(const AValue: TJSONValue): MemoryInfoResult; overload; static;
    class function FromJSON(const AValue: string): MemoryInfoResult; overload; static;
    function ToJSONObject: TJSONValue;
    function ToJSONString: string;
    property locked: TMemoryInfo read Flocked write Flocked;
  end;

//  [JsonSerialize(TJsonMemberSerialization.Fields)]
//  DataSet = record
//  private
//    [JsonName('Dataset')]
//    FDataset: TArray<MemoryInfoResult>;
//  public
//    class function FromJSON(const AValue: TJSONArray): DataSet; overload; static;
//    class function FromJSON(const AValue: string): DataSet; overload; static;
//    function ToJSONArray: TJSONArray;
//    function ToJSONString: string;
//    property Dataset: TArray<MemoryInfoResult> read FDataset write FDataset;
//  end;

implementation

class function MemoryInfoResult.FromJSON(const AValue: TJSONValue): MemoryInfoResult;
begin
  Result := TJSONMapper<MemoryInfoResult>.Default.FromObject(AValue);
end;

class function MemoryInfoResult.FromJSON(const AValue: string): MemoryInfoResult;
begin
  Result := TJSONMapper<MemoryInfoResult>.Default.FromObject(AValue);
end;

function MemoryInfoResult.ToJSONObject: TJSONValue;
begin
  Result := TJSONMapper<MemoryInfoResult>.Default.ToObject(Self);
end;

function MemoryInfoResult.ToJSONString: string;
begin
  Result := TJSONMapper<MemoryInfoResult>.Default.ToString(Self);
end;

//class function DataSet.FromJSON(const AValue: TJSONArray): DataSet;
//begin
//  var LArr := TJSONMapper<JSONRPC2Result>.Default.FromArray(AValue);
//  Result.Dataset := LArr;
//end;
//
//class function DataSet.FromJSON(const AValue: string): DataSet;
//begin
//  var LArr := TJSONMapper<JSONRPC2Result>.Default.FromArray(AValue);
//  Result.Dataset := LArr;
//end;
//
//function DataSet.ToJSONArray: TJSONArray;
//begin
//  Result := TJSONMapper<JSONRPC2Result>.Default.ToArray(Dataset);
//end;
//
//function DataSet.ToJSONString: string;
//begin
//  Result := TJSONMapper<JSONRPC2Result>.Default.ToString(Dataset);
//end;

end.
