// This unit is autogenerated. Do not edit it manually.
// Source: JSON entered in editor
// Date: 30/9/2023 8:47:57 PM

unit JSONRPC.Web3.SolanaTypes.getAccountInfoResultsType;

interface

uses
  System.JSON.Serializers;

type
  [JsonSerialize(TJsonMemberSerialization.Fields)]
  getAccountInfoHeader = record
  private
    FnumReadonlySignedAccounts: Integer;
    FnumReadonlyUnsignedAccounts: Integer;
    FnumRequiredSignatures: Integer;
  public
    property numReadonlySignedAccounts: Integer read FnumReadonlySignedAccounts write FnumReadonlySignedAccounts;
    property numReadonlyUnsignedAccounts: Integer read FnumReadonlyUnsignedAccounts write FnumReadonlyUnsignedAccounts;
    property numRequiredSignatures: Integer read FnumRequiredSignatures write FnumRequiredSignatures;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TInstruction = record
  private
    Faccounts: TArray<Integer>;
    Fdata: string;
    FprogramIdIndex: Integer;
  public
    property accounts: TArray<Integer> read Faccounts write Faccounts;
    property data: string read Fdata write Fdata;
    property programIdIndex: Integer read FprogramIdIndex write FprogramIdIndex;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TStatus = record
  private
    FOk: string;
  public
    property Ok: string read FOk write FOk;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TMessage = record
  private
    FaccountKeys: TArray<string>;
    Fheader: getAccountInfoHeader;
    Finstructions: TArray<TInstruction>;
    FrecentBlockhash: string;
  public
    property accountKeys: TArray<string> read FaccountKeys write FaccountKeys;
    property header: getAccountInfoHeader read Fheader write Fheader;
    property instructions: TArray<TInstruction> read Finstructions write Finstructions;
    property recentBlockhash: string read FrecentBlockhash write FrecentBlockhash;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TMeta = record
  private
    Ferr: string;
    Ffee: Integer;
    FinnerInstructions: TArray<string>;
    FlogMessages: TArray<string>;
    FpostBalances: TArray<Integer>;
    FpostTokenBalances: TArray<string>;
    FpreBalances: TArray<Integer>;
    FpreTokenBalances: TArray<string>;
    Frewards: string;
    Fstatus: TStatus;
  public
    property err: string read Ferr write Ferr;
    property fee: Integer read Ffee write Ffee;
    property innerInstructions: TArray<string> read FinnerInstructions write FinnerInstructions;
    property logMessages: TArray<string> read FlogMessages write FlogMessages;
    property postBalances: TArray<Integer> read FpostBalances write FpostBalances;
    property postTokenBalances: TArray<string> read FpostTokenBalances write FpostTokenBalances;
    property preBalances: TArray<Integer> read FpreBalances write FpreBalances;
    property preTokenBalances: TArray<string> read FpreTokenBalances write FpreTokenBalances;
    property rewards: string read Frewards write Frewards;
    property status: TStatus read Fstatus write Fstatus;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TTransaction_1 = record
  private
    Fmessage: TMessage;
    Fsignatures: TArray<string>;
  public
    property message: TMessage read Fmessage write Fmessage;
    property signatures: TArray<string> read Fsignatures write Fsignatures;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  getAccountInfoResultTransaction = record
  private
    Fmeta: TMeta;
    Ftransaction: TTransaction_1;
  public
    property meta: TMeta read Fmeta write Fmeta;
    property transaction: TTransaction_1 read Ftransaction write Ftransaction;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  getAccountInfoResult = record
  private
    FblockHeight: Integer;
    FblockTime: string;
    Fblockhash: string;
    FparentSlot: Integer;
    FpreviousBlockhash: string;
    Ftransactions: TArray<getAccountInfoResultTransaction>;
  public
    property blockHeight: Integer read FblockHeight write FblockHeight;
    property blockTime: string read FblockTime write FblockTime;
    property blockhash: string read Fblockhash write Fblockhash;
    property parentSlot: Integer read FparentSlot write FparentSlot;
    property previousBlockhash: string read FpreviousBlockhash write FpreviousBlockhash;
    property transactions: TArray<getAccountInfoResultTransaction> read Ftransactions write Ftransactions;
  end;

implementation

end.
