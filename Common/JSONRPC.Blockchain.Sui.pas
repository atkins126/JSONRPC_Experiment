// This unit is autogenerated. Do not edit it manually.
// Source: JSON entered in editor
// Date: 19/7/2023 3:56:00 AM

unit JSONRPC.Blockchain.Sui;

interface

uses
  System.JSON.Serializers;

type
  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TEpochRollingGasCostSummary = record
  private
    FcomputationCost: Integer;
    FstorageCost: Integer;
    FstorageRebate: Integer;
    FnonRefundableStorageFee: Integer;
  public
    property computationCost: Integer read FcomputationCost write FcomputationCost;
    property storageCost: Integer read FstorageCost write FstorageCost;
    property storageRebate: Integer read FstorageRebate write FstorageRebate;
    property nonRefundableStorageFee: Integer read FnonRefundableStorageFee write FnonRefundableStorageFee;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TData = record
  private
    Fepoch: Integer;
    FsequenceNumber: Integer;
    Fdigest: string;
    FnetworkTotalTransactions: Integer;
    FpreviousDigest: string;
    FepochRollingGasCostSummary: TEpochRollingGasCostSummary;
    FtimestampMs: Int64;
    Ftransactions: TArray<string>;
    FcheckpointCommitments: TArray<string>;
    FvalidatorSignature: string;
  public
    property epoch: Integer read Fepoch write Fepoch;
    property sequenceNumber: Integer read FsequenceNumber write FsequenceNumber;
    property digest: string read Fdigest write Fdigest;
    property networkTotalTransactions: Integer read FnetworkTotalTransactions write FnetworkTotalTransactions;
    property previousDigest: string read FpreviousDigest write FpreviousDigest;
    property epochRollingGasCostSummary: TEpochRollingGasCostSummary read FepochRollingGasCostSummary write FepochRollingGasCostSummary;
    property timestampMs: Int64 read FtimestampMs write FtimestampMs;
    property transactions: TArray<string> read Ftransactions write Ftransactions;
    property checkpointCommitments: TArray<string> read FcheckpointCommitments write FcheckpointCommitments;
    property validatorSignature: string read FvalidatorSignature write FvalidatorSignature;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TResult = record
  private
    Fdata: TArray<TData>;
    FnextCursor: Integer;
    FhasNextPage: Boolean;
  public
    property data: TArray<TData> read Fdata write Fdata;
    property nextCursor: Integer read FnextCursor write FnextCursor;
    property hasNextPage: Boolean read FhasNextPage write FhasNextPage;
  end;

implementation

end.
